		device	zxspectrum128

	ifdef isFX
		display "Compiling 'grinder'"
	endif

		define STARTTIME 1340

@DEBUG = 0
@VOID = #57E0

		include "../kernel/constants.inc"
		include "../kernel/pg1fx.inc"

;;-----------------------------------------------------------------------------
	macro border n
	  if DEBUG
	    if n > 0
		ld	a,n
	    else
		xor	a
	    endif
		out	(254),a
	  endif
	endm

;;-----------------------------------------------------------------------------
		org	RUNZONE

start		ld	hl,#4000
		ld	de,#4001
		ld	bc,#1800
		ld	(hl),-1
		ldir
		ld	bc,#02FF
		ld	(hl),0q077
		ldir
		ld	a,7
		ld	(actborder),a
		out	(254),a
		ld	a,#11
		call	xchg.bnk
		ld	hl,bgImage+#1800
		ld	de,#5800
		ld	bc,#0300
		ldir

		ld	bc,#8020
shadeloop	push	bc
		ei
		halt
		call	shadeLines	;vykonna rutina
		call	rndLine		;zapina riadky v LINE_SHADES tabulke na zobrazenie/zmazanie
		pop	bc
		ld	a,c
		cp	b
		call	z,kiteyes.attrs
		djnz	shadeloop

		ld	hl,displayList
		ld	de,displayList+1
		ld	bc,192 * 4
		ld	(hl),l
		ldir

mainloop	ei
		halt
		ld	(restoreSP+1),sp

		border	1

		; Render sprites.
		ld	sp,displayList + (8 * 4)
		ld	bc,168 * 7
renderLoop	pop	hl
		pop	de
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ld	a,(hl)
		ld	(de),a
		jp	pe,renderLoop

		border	2

		; Update animation phases.

		ld	a,(rotPhase + 1)
		add	a,8
		ld	(rotPhase + 1),a

animPhase	ld	de,sinusTabs
		inc	e
		ld	(animPhase + 1),de

		; Create display list.

		ld	sp,displayList + ((168 + 8) * 4)
		ld	l,256 - (168 + 8)

displayLoop	ld	h,high vramTabs
		ld	b,(hl)			; Load bits 8..15 of VRAM address.
		inc	h
		ld	a,(de)			; Load horizontal sprite offset 0..31.
		or	(hl)			; Calculate bits 0..7 of VRAM address.
		ld	c,a

		push	bc			; Store destination VRAM address.

		inc	d
		inc	h
		ld	a,(de)			; Load horizontal sprite offset 0..7.
		or	(hl)			; Add correct dither line %111DD000.
		ld	b,a
		inc	h
		ld	a,(hl)			; Load rotation phase offset.
rotPhase	add	a,0
		ld	c,a

voidPhase	ld	a,-1
		cp	l
		jr	nc,.store
		ld	bc,VOID
.store		push	bc			; Store source sprite address.

		dec	d
		inc	e
		inc	l
		jr	nz,displayLoop

restoreSP	ld	sp,0

		; Random fade-in effect (modifies bits 8..15 of VRAM lookup).

rnd		ld	a,0
		ld	b,a
		add	a,a
		add	a,a
		add	a,b
		inc	a
		ld	(rnd + 1),a
randomFn	jr	$+2
		ld	h,(high vramTabs) - 1
		ld	l,a
		ld	a,(hl)
		inc	h
		ld	(hl),a

		border	3
		call	followscene
		border	0
		jr	mainloop


fnAddGrinder	ld	b,high finalTabs
		ld	c,a
		ld	h,(high vramTabs) + 3
		ld	l,a
		ld	a,(bc)
		ld	(hl),a

		border	3
		call	followscene
		border	0
		jr	mainloop

fnSlideDown	ld	h,(high vramTabs) + 3
		ld	l,a
		ld	b,h
		cpl
		ld	c,a
		ld	a,(bc)
		ld	e,(hl)
		ld	(hl),a
		ld	a,e
		ld	(bc),a
.aniPhase	ld	hl,slideDownAni
		ld	a,(hl)
		ld	(voidPhase+1),a
		inc	hl
		ld	(.aniPhase+1),hl

		border	0

		ld	bc,STARTTIME + 1490
		ld	hl,(FRAMES)
		xor	a
		sbc	hl,bc
		jp	c,mainloop

		ei
		halt
		call	followscene
fillAttrPtrs	ld	hl,vramTabs+(256-(192-8))
		ld	de,#5800
		ld	bc,#0020
		ld	a,24
.loop		ex	af,af'
		ld	(hl),d
		inc	h
		ld	(hl),e
		dec	h
		dec	l
		ex	de,hl
		add	hl,bc
		ex	de,hl
		ex	af,af'
		dec	a
		jr	nz,.loop

scrollScreenOut	dec	a
		ex	af,af'
		ld	a,12
.loop2		ex	af,af'
		ei
		halt
		ld	hl,vramTabs+(255-12)
		ld	b,(192-8-12)+24
.loop1		ld	c,a
		ld	d,(hl)
		inc	h
		ld	e,(hl)
		dec	h
		dec	l
		push	hl
		ld	h,d
		ld	l,e
		inc	l
.faster		nop
	dup 17
		ldi
	edup
		pop	hl
		djnz	.loop1
		ex	af,af'
		dec	a
		jr	z,.finish
		cp	5
		jr	nz,.loop2
		ex	af,af'
		ld	a,#2C ; inc l
		ld	(.faster),a
		jr	.loop2+1

.finish		ei
		halt
		ld	hl,#5800
		ld	de,#5801
		ld	bc,#02C0
		ld	(hl),0q177
		ldir
		ld	bc,#003F
		ld	(hl),0q077
		ldir
		ld	hl,#4000
		ld	de,#4001
		ld	bc,#17FF
		ld	(hl),l
		ldir
		ret

shadeLines	ld	ix,lineShades
		xor	a
		ld	de,#4000
		ld	b,23
.loop		ld	a,(ix+0)
		or	a
		jr	z,.noShade
		push	af
		push	de
		push	bc
		ld	a,(ix+1)
		cp	16
		jr	c,.maxWidth
		ld	a,16
.maxWidth	add	a,e
		ld	e,a
		ld	l,e
		ld	h,d
		ld	bc,bgImage-#4000
		add	hl,bc
		ld	c,l
		ld	b,h
		ld	h,fiftyShades/256
		ld	a,(ix+1)
		call	shadeLine
		pop	bc
		pop	de
		pop	af
.noShade	ld	a,e
		add	a,32
		ld	e,a
		sbc	a,a
		and	8
		add	a,d
		ld	d,a
		inc	ix
		inc	ix
		djnz	.loop
		ret

shadeLine	ld	l,15*8
		cp	16
		jr	c,.loop
		neg
		add	a,31
		ld	l,a
		or	a
		rl	l
		rl	l
		rl	l
.loop		ex	af,af'
	dup 8
		ld	a,(bc)
		or	(hl)
		ld	(de),a
		inc	b
		dec	l
		inc	d
	edup

		ld	a,b
		sub	8
		ld	b,a
		ld	a,d
		sub	8
		ld	d,a
		dec	bc
		dec	e
		ex	af,af'

		dec	a
		jp	p,.loop

		ld	a,(ix+1)
		inc	a
		ld	(ix+1),a
		cp	32
		ret	nz
		xor	a
		ld	(ix+0),a
		ret

rndLine		ld	a,4
		dec	a
		ld	(rndLine+1),a
		ret	nz
		ld	a,4
		ld	(rndLine+1),a
		ld	a,(rndLinesPos)
		cp	24
		ret	z
		ld	hl,rndLines
		add	a,l
		ld	l,a
		ld	a,(hl)
		add	a,a
		ld	hl,lineShades
		add	a,l
		ld	l,a
		ld	(hl),1
		inc	hl
		ld	(hl),1
		ld	a,(rndLinesPos)
		inc	a
		ld	(rndLinesPos),a
		ret

followscene:	ld	hl,scenario
		ld	a,(FRAMES)
		add	a,(hl)
		inc	hl
		ld	a,(FRAMES+1)
		adc	a,(hl)
		ret	nc		; (FRAMES) < sync
		inc	hl

.readpatts	; A is zeroed by FRAMES test or by countdown of height
		or	(hl)
		inc	hl
		jr	z,.finishpatts	; high byte == 0 -> end of list
		ld	d,a
		ldi	e,(hl)
		jp	m,.actionitem

		ldi	a,(hl)		; color
		ex	af,af
		ldi	c,(hl)		; C = 32-width
		ld	a,32
		sub	c
		ld	ixl,a		; IXL = width
		ldi	a,(hl)		; height
		ex	de,hl		; HL = VRAM, DE = scenario ptr, C = 32-w, IXL = w, A = h, A' = color
.fillrect
		ex	af,af'		; A = color, A' = row counter
		ld	b,ixl		; B = width
.fillrow	ld	(hl),a
		inc	l
		djnz	.fillrow
		add	hl,bc		; attr_addr += 32-width
		ex	af,af'
		dec	a
		jr	nz,.fillrect
		ex	de,hl		; HL = scenario ptr
		jr	.readpatts	; A is zero from height counter

.finishpatts	ld	(followscene+1),hl
		ret

.actionitem	ld	(followscene+1),hl
		ex	de,hl
		jp	(hl)		; call action, return to caller of followscene

kiteyes.attrs	ld	a,#46
		ld	(#59AB),a
		ld	(#59AC),a
		ld	hl,#59CB
		ld	(hl),a
		inc	l
		ld	(hl),a
		inc	l
		ld	(hl),a
		inc	l
		ld	(hl),a
		ld	hl,#59EB
		ld	(hl),a
		inc	l
		ld	(hl),a
		inc	l
		ld	(hl),a
		inc	l
		ld	(hl),a
		ret

@action.addGrinder
		ld	a,low ((fnAddGrinder - randomFn) - 2)
		ld	(randomFn+1),a
kiteyes1	include "kiteyes1.inc"
		ret

@action.slideDown
		ld	a,low ((fnSlideDown - randomFn) - 2)
		ld	(randomFn+1),a
		ld	a,#23 ; `inc hl` in fillrect will be needed now...
		ld	(followscene.fillrow+1),a
		call	kiteyes2
kiteyes2	include "kiteyes2.inc"
		ret


rndLinesPos	db	0
rndLines	db	1, 21, 17, 11, 16, 5, 13, 3
		db	0, 22, 19, 4, 23, 6, 7, 10
		db	12, 8, 15, 2, 18, 9, 20, 14

slideDownAni	include "slide-down.a80"
scenario	include "scenario.a80"
;;-----------------------------------------------------------------------------


		align	256

bgImage		incbin "background.scr"

fiftyShades	db	00000000b	;0
		db	00000000b
		db	00000000b
		db	00000000b
		db	00000000b
		db	00000000b
		db	00000000b
		db	00000000b

		db	10001000b	;1
		db	00000000b
		db	00000000b
		db	00000000b
		db	10001000b
		db	00000000b
		db	00000000b
		db	00000000b

		db	10101000b	;2
		db	00000000b
		db	00100010b
		db	00000000b
		db	10001000b
		db	00000000b
		db	00100010b
		db	00000000b

		db	10101010b	;3
		db	00000000b
		db	00100010b
		db	00000000b
		db	10101010b
		db	00000000b
		db	00100010b
		db	00000000b

		db	10101010b	;4
		db	01000000b
		db	10101010b
		db	00000000b
		db	10101010b
		db	00000000b
		db	10101010b
		db	00000000b

		db	10101010b	;5
		db	01000100b
		db	10101010b
		db	00010000b
		db	10101010b
		db	01000100b
		db	10101010b
		db	00000000b

		db	10101010b	;6
		db	01010100b
		db	10101010b
		db	00010001b
		db	10101010b
		db	01000101b
		db	10101010b
		db	00010001b

		db	10101010b	;7
		db	01010101b
		db	10101010b
		db	01010001b
		db	10101010b
		db	01010101b
		db	10101010b
		db	00010001b

		db	11101010b	;8
		db	01010101b
		db	10101010b
		db	01010101b
		db	10101110b
		db	01010101b
		db	10101010b
		db	01010101b

		db	11101110b	;9
		db	01010101b
		db	10111010b
		db	01010101b
		db	11101110b
		db	01010101b
		db	10101011b
		db	01010101b

		db	11111111b	;10
		db	01010101b
		db	10111011b
		db	01010101b
		db	11101111b
		db	01010101b
		db	10111011b
		db	01010101b

		db	11111111b	;11
		db	01010101b
		db	11111011b
		db	01010101b
		db	11111111b
		db	01010101b
		db	10111111b
		db	01010101b

		db	11111111b	;12
		db	11011101b
		db	11111111b
		db	01010101b
		db	11111111b
		db	11011101b
		db	10111111b
		db	01010101b

		db	11111111b	;13
		db	11011101b
		db	11111111b
		db	01110111b
		db	11111111b
		db	11011101b
		db	11111111b
		db	01010111b

		db	11111111b	;14
		db	11111111b
		db	11111111b
		db	01110111b
		db	11111111b
		db	11111111b
		db	11111111b
		db	01110111b

		db	11111111b	;15
		db	11111111b
		db	11111111b
		db	11111111b
		db	11111111b
		db	11111111b
		db	11111111b
		db	11111111b

lineShades	block	21,0
		db	1
		block	6,0
		db	1
		block	99,0

		; Display list. Total 192 * 4 = 768 bytes (unaligned).
		; Contains pairs { source address, destination VRAM address }.
displayList


		savebin "final.bin",start,$-start

;;-----------------------------------------------------------------------------
	ifndef isFX
	opt push listoff
		page 1
		org sinusTabs
	module lookupTables
		include "lookups.a80"
	endmodule

		define PRESET.border 7
		define PRESET.paper 0q117
		define PRESET.waitfor STARTTIME
		include "../kernel/kernel.micro.inc"
		savesna "grinder.sna",microkernel
	opt pop
	endif
