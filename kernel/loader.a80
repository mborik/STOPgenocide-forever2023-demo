		device	zxspectrum128
		emptytap OUTPUT

		include "constants.inc"

	module loader
		display "Composing bank 0 & loader"

		org	#6000

begin = $
		incbin "../bank0"

numberOfBanks = 5
unpackpage:	ld	hl,#51A1
		ld	bc,((30 / numberOfBanks) << 8) | #FF
.pgprog:	ld	(hl),c	; draw progress
		inc	l
		djnz	.pgprog
		ld	(unpackpage+1),hl
		di
		ld	hl,#8000
		ld	de,#C000
		ld	a,(hl)
		and	15
		cp	4
		jr	nz,.nonpacked
		call	introzx0.depack
		ei
		ret

.nonpacked	ld	bc,#4000
		ldir
		ei
		ret

fadeoutandrun:	ld	a,25
.loop:		ei
		halt
		halt
		ex	af,af'
		call	attrhide
		ex	af,af'
		dec	a
		jr	nz,.loop
		ld	hl,kernelblock
		ld	de,#8000
		call	introzx0.depack
		jp	kernel

	module introzx0
depack
	opt push listoff
		include "dzx0_fast.a80"
	opt pop
	endmodule

attrhide:	ld	hl,22528
		ld	c,24
.atthd2:	ld	b,32
		push	bc
.atthd3:	ld	a,(hl)
		and	7
		jr	z,.atthd4
		dec	a
.atthd4:	push	af
		ld	a,(hl)
		and	56
		jr	z,.atthd5
		ld	c,8
		sub	c
		ld	c,a
		pop	af
		or	c
		jr	.atthd6
.atthd5:	ld	a,(hl)
		and	248
		ld	c,a
		pop	af
		or	c
.atthd6:	ld	(hl),a
		inc	hl
		djnz	.atthd3
		pop	bc
		dec	c
		jr	nz,.atthd2
		ret

kernelblock	incbin "final.pak"

; LOADER auto-detect/test HW (positioned after kernelblock, free to overwrite by later blocks)

		; Read NextReg into A (does modify A and BC, and NextReg selected at I/O port)
	macro NEXTREG2A register?
		ld	a,register?
		call	readNextReg
	endm

introseq:	di
		ld	hl,introseq.dat
		ld	de,#4000
		call	introzx0.depack

testnext	; detect Z80N CPU ; canonical test from ped7g/ZXSpectrumNextMisc/ code snippets
		ld	a,#80
		hex	ED240000	; mirror a : nop : nop
		dec	a
		jr	nz,test48
		; Z80N detected, try to read next registers and reconfigure machine, A = 0 here
		call	readNextReg	; check if machine ID is 8 or 10 (in lower 4b)
		add	a,5
		and	#0F
		cp	8+5		; 8 is emulator, 10 is ZX Next
		jr	c,test48	; machineID 0..7, 11..15
		; read video mode (50/60Hz, VGA / HDMI)
		NEXTREG2A 5		; PERIPHERAL_1_NR_05
		and	4
		ld	hl,ERR.60Hz
		jr	nz,printout	; error in 60Hz modes
; 		NEXTREG2A #11		; VIDEO_TIMING_NR_11
; 		inc	a
; 		and	#07
;		ld	hl,ERR.HDMI
; 		jr	z,printout	; error in HDMI 50Hz mode
		; try to force 128 +3 timing, but don't require it (user can have lock)
		NEXTREG2A #03		; MACHINE_TYPE_NR_03
		and	#0F
		or	%1'011'0000	; try to set "011 = ZX +2A/+2B/+3 display timing"
		out	(c),a
		; AY sound chip, disable buttons
		NEXTREG2A #06		; PERIPHERAL_2_NR_06
		and	%0'1'000'1'00	; disable buttons: CPU speed, 50/60Hz, DRIVE, NMI
		inc	a		; set AY sound chip
		out	(c),a
		; ACB stereo
		NEXTREG2A #08		; PERIPHERAL_3_NR_08
		and	%0001'0000	; preserve: internal speaker, disable: DAC, #FF I/O Timex read, Turbosound
		or	%1010'0000	; unlock #7FFD I/O, contention ON, AY ACB stereo
		out	(c),a
		; set 3.5MHz
		hex	ED910700	; nextreg TURBO_CONTROL_NR_07, 0

test48		ld	hl,#C000
		ld	a,#56		; #56 and #57 used for test
		out	(#fd),a
		ld	(hl),a
		inc	a
		out	(#fd),a
		ld	(hl),a
		dec	a
		out	(#fd),a
		cp	(hl)
		ei
		ret	z
	; 128k memory test failed
		ld	hl,ERR.48k
	;	|
	; fallthrough into printout routine
	;	|
	;	v
printout	push	hl
		ld	a,#F4
		ld	(23739),a
		ld	a,2
		call	#1601
		ld	hl,ERR
		call	.loop
		pop	hl
		call	.loop
		jr	$	; infinite loop after message is printed

.loop		ld	a,(hl)
		and	127
		rst	16
		bit	7,(hl)
		ret	nz
		inc	hl
		jr	.loop

ERR		db	22, 21, 1
		db	16, 2
		dc	"this demo does not work "
ERR.48k		dc	"on 48k"
ERR.60Hz	dc	"in 60Hz"

readNextReg	; reads nextreg in A into A (does modify currently selected NextReg at I/O port)
		ld	bc,#243B	; bc = TBBLUE_REGISTER_SELECT_P_243B
		out	(c),a
		inc	b		; bc = TBBLUE_REGISTER_ACCESS_P_253B
		in	a,(c)		; read desired NextReg state
		ret

introseq.dat:	incbin "loading.pak"

total = $-begin
	endmodule


		display "Composing BASIC"
		include "sinclairBASIC.inc"

		org	23755-17

; BASIC header
	tapout OUTPUT,0

		db	0
		db	C_STOP, "GENOCIDE "
		dw	bas.total
		dw	1 ; start line
		dw	bas.total

	tapend

; BASIC block
	tapout OUTPUT

	module bas
line1:		db	0, 1
		dw	line1.len
line1.cmds	; POKE VAL "23624",NOT PI:
		db	C_POKE
		VAL	23624, ','
		db	C_NOT, C_PI, ':'
		; POKE VAL "23693",NOT PI:
		db	C_POKE
		VAL	23693, ','
		db	C_NOT, C_PI, ':'
		; CLEAR VAL "x":
		db	C_CLEAR
		VAL	loader.begin - 1, ':'
		; POKE VAL "23739",CODE "o":
		db	C_POKE
		VAL	23739, ','
		db	C_CODE, '"o":'
		; POKE VAL "23388",VAL "16":
		db	C_POKE
		VAL	23388, ','
		VAL	16, ':'
		; OUT VAL "32765",VAL "16"
		db	C_OUT
		VAL	32765, ','
		VAL	16, ':'
		; LOAD _"block0" CODE:
		db	C_LOAD, ' "block0"', C_CODE, ':'
		; RANDOMIZE USR VAL "x"
		db	C_RANDOMIZE, C_USR
		VAL	loader.introseq, EOL
line1.len = $ - line1.cmds

line2:		db	0, 2
		dw	line2.len
line2.cmds	; READ s
		db	C_READ, 's:'
		; POKE VAL "23388",s+VAL "16":
		db	C_POKE
		VAL	23388, ','
		db	's+'
		VAL	16, ':'
		; OUT VAL "32765",s+VAL "16":
		db	C_OUT
		VAL	32765, ','
		db	's+'
		VAL	16, ':'
		; LOAD _"page"+(STR$ s) CODE:
		db	C_LOAD, ' "block"+(', C_STRS, 's)', C_CODE, ':'
		; RANDOMIZE USR VAL "x":
		db	C_RANDOMIZE, C_USR
		VAL	loader.unpackpage, ':'
		; IF s <> VAL "7" THEN
		db	C_IF, 's', C_NOTEQ
		VAL	7, C_THEN
		; GO TO VAL "2"
		db	C_GOTO
		VAL	2, EOL
line2.len = $ - line2.cmds

line3:		db	0, 3
		dw	line3.len
line3.cmds	; PAUSE VAL "42"
		db	C_PAUSE
		VAL	100, ":"
		; RANDOMIZE USR VAL "x"
		db	C_RANDOMIZE, C_USR
		VAL	loader.fadeoutandrun, EOL
line3.len = $ - line3.cmds

line4:		db	0, 4
		dw	line4.len
line4.cmds	; POKE VAL "23388",VAL "16":
		db	C_POKE
		VAL	23388, ','
		VAL	16, ':'
		; OUT VAL "32765",VAL "16":
		db	C_OUT
		VAL	32765, ','
		VAL	16, ':'
		; LOAD _"epilog" CODE:
		db	C_LOAD, ' "epilog"', C_CODE, ':'
		; RANDOMIZE USR VAL "25e3"
		db	C_RANDOMIZE, C_USR, C_VAL, '"25e3"', EOL
line4.len = $ - line4.cmds

line9:		db	0, 9
		dw	line9.len
line9.cmds	; DATA...
		db	C_DATA
		VAL	1, ','
		VAL	3, ','
		VAL	4, ','
		VAL	6, ','
		VAL	7, EOL
line9.len = $ - line9.cmds

total = $ - line1
	endmodule
	tapend

; loader block
		display "Storing loader into output tape"
		savetap OUTPUT, CODE, "block0", loader.begin, loader.total

;;-----------------------------------------------------------------------------
	macro putBank number?, filename?
@__putBank_number = number?
		lua allpass
			_pl("putBank"..tostring(_c('__putBank_number')))
		endlua

		tapout OUTPUT,0
			org	0
			db	3 ;; BYTES
		lua allpass
			_pc("db 'block"..tostring(_c('__putBank_number')).."    '")
		endlua

			dw	.filelength
			dw	#8000 ;; block start address
			dw	#8000
		tapend

		tapout OUTPUT
			org #C000,(__putBank_number)
.filedata		incbin filename?
.filelength = $-.filedata

	if .filelength > #4000
		display "Packed bank ",/D,__putBank_number," is too long!"
	endif
		tapend
	endm
;;-----------------------------------------------------------------------------
		display "Storing banks into output tape"

		putBank 1,"../bank1.pak"
		putBank 3,"../bank3"
		putBank 4,"../bank4"
		putBank 6,"../bank6"
		putBank 7,"../bank7.pak"

;;-----------------------------------------------------------------------------
		display "Storing epilog part into output tape"


	module epilog
start = 25000
		tapout OUTPUT,0
			db	3 ;; BYTES
			db	"epilog    "
			dw	.filelength
			dw	start
			dw	#8000
		tapend

		tapout OUTPUT
			org	start
.filedata		incbin "../epilog.bin"
.filelength = $-.filedata
		tapend
	endmodule
