		device	zxspectrum128

		include "pg1fx.inc"
		include "pg3fx.inc"
		include "pg4fx.inc"
		include "pg6fx.inc"
		include "pg7fx.inc"

@page128	equ	#7FFD
@act128page	equ	#5B5C
@actborder	equ	#5C48
@FRAMES		equ	#5C78
@RUNZONE	equ	#8400
@basesp		equ	RUNZONE


		org	#8000
		output	"final.bin"

@xchg.vram:	ld	a,#1D
		xor	#0A
		ld	(xchg.vram+1),a
@xchg.bnk:	ld	(act128page),a
		ld	bc,page128
		out	(c),a
		ret

@depack:	module zx0
		include "dzx0_fast.a80"
		endmodule

fxtable:	include "fxtable.inc"
		db	0


	if $ > #8181
		display "Too long! ",/D,($-#8181)," bytes out of interrupt!"
	else
		display /D,(#8181-$)," bytes free before interrupt"
	endif

		block	(#8181-$),0

;;- INTERRUPT -----------------------------------------------------------------
;		org	#8181

interrupt:	push	af		; zakladne osetrenie prerusenia
		ld	a,(actborder)	; s volanim hudobneho hradla
		out	(254),a
		push	bc
		push	de
		push	hl
		exx
		ex	af,af'
		push	ix
		push	iy
		push	af
		push	bc
		push	de
		push	hl

		ld	a,MUSIC.page	; a prestrankujeme na banku s muzikou
		ld	bc,page128
		out	(c),a
		call	MUSIC.out
		ld	a,(act128page)
		ld	bc,page128
		out	(c),a

@IMCALL		ld	bc,#0101

		ld	hl,(FRAMES)
		inc	hl
		ld	(FRAMES),hl

		ld	a,(act128page)
		push	af
		and	#F8		; ponechame nastavenu vram
		or	MUSIC.page	; a prestrankujeme na banku s muzikou
		ld	bc,page128
		out	(c),a
		call	MUSIC.play
		pop	af
		ld	bc,page128
		out	(c),a

		pop	hl
		pop	de
		pop	bc
		pop	af
		pop	iy
		pop	ix
		ex	af,af'
		exx
		pop	hl
		pop	de
		pop	bc
		pop	af
		ei
		ret

im2vector = ((high $) + 1) << 8
		display /D,(im2vector-$)," bytes free to IM2 vector"
		block	(im2vector-$), 0
		block	257, high interrupt

;;-----------------------------------------------------------------------------

@kernel:	di
		ld	sp,basesp
		ld	a,high im2vector
		ld	i,a
		im	2
; init music
		ld	a,MUSIC.page | #10
		call	xchg.bnk
		call	MUSIC.init
; clear vram
		ld	hl,#4000
		ld	de,#4001
		ld	bc,#1AFF
		ld	(hl),l
		ldir
; outing of music to AY is delayed by one interrupt
		dec	bc
		ld	(FRAMES),bc
		ld	a,#10
		call	xchg.bnk

.run:		ld	hl,fxtable
		ld	a,(hl)
		or	a
		jr	z,.end
		inc	hl
		ld	e,(hl)
		inc	hl
		ld	d,(hl)
		push	hl
		ex	de,hl
		ld	e,a
		and	#17
		ld	b,a
		ld	a,(act128page)
		and	#F8
		push	af
		or	b
		call	xchg.bnk
		bit	7,e
		jr	nz,.ldir
		ld	de,RUNZONE
		call	depack
		pop	af
		call	xchg.bnk
		pop	hl
		inc	hl
		ld	e,(hl)
		inc	hl
		ld	d,(hl)
		inc	hl
		ld	(.run+1),hl
		call	RUNZONE
		jr	.run

.ldir:		pop	af
		ex	de,hl
		pop	hl
		inc	l
		ld	c,(hl)
		inc	l
		ld	b,(hl)
		inc	l
		ld	(.run+1),hl
		ex	de,hl
		ld	de,RUNZONE
		ldir
		call	xchg.bnk
		call	RUNZONE
		jr	.run

.end		ei
		halt
		jr	.end

		display /D,(RUNZONE-$)," bytes free after kernel"
		block	(RUNZONE-$),0

		outend

		export page128
		export act128page
		export actborder
		export FRAMES
		export basesp
		export kernel
		export IMCALL
		export RUNZONE
		export depack
		export xchg.vram
		export xchg.bnk
		export MUSIC.page
		export MUSIC.out
		export MUSIC.init
		export MUSIC.play
		export MUSIC.buffer
